/*! For license information please see epub-object.bundle.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.epubObject=e():t.epubObject=e()}(self,(function(){return(()=>{var t={742:(t,e)=>{"use strict";e.byteLength=function(t){var e=u(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function(t){var e,r,o=u(t),a=o[0],s=o[1],c=new i(function(t,e,r){return 3*(e+r)/4-r}(0,a,s)),l=0,f=s>0?a-4:a;for(r=0;r<f;r+=4)e=n[t.charCodeAt(r)]<<18|n[t.charCodeAt(r+1)]<<12|n[t.charCodeAt(r+2)]<<6|n[t.charCodeAt(r+3)],c[l++]=e>>16&255,c[l++]=e>>8&255,c[l++]=255&e;return 2===s&&(e=n[t.charCodeAt(r)]<<2|n[t.charCodeAt(r+1)]>>4,c[l++]=255&e),1===s&&(e=n[t.charCodeAt(r)]<<10|n[t.charCodeAt(r+1)]<<4|n[t.charCodeAt(r+2)]>>2,c[l++]=e>>8&255,c[l++]=255&e),c},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o=[],a=16383,s=0,u=n-i;s<u;s+=a)o.push(c(t,s,s+a>u?u:s+a));return 1===i?(e=t[n-1],o.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],o.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"=")),o.join("")};for(var r=[],n=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,s=o.length;a<s;++a)r[a]=o[a],n[o.charCodeAt(a)]=a;function u(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function c(t,e,n){for(var i,o,a=[],s=e;s<n;s+=3)i=(t[s]<<16&16711680)+(t[s+1]<<8&65280)+(255&t[s+2]),a.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return a.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},764:(t,e,r)=>{"use strict";const n=r(742),i=r(645),o="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.Buffer=u,e.SlowBuffer=function(t){return+t!=t&&(t=0),u.alloc(+t)},e.INSPECT_MAX_BYTES=50;const a=2147483647;function s(t){if(t>a)throw new RangeError('The value "'+t+'" is invalid for option "size"');const e=new Uint8Array(t);return Object.setPrototypeOf(e,u.prototype),e}function u(t,e,r){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return f(t)}return c(t,e,r)}function c(t,e,r){if("string"==typeof t)return function(t,e){if("string"==typeof e&&""!==e||(e="utf8"),!u.isEncoding(e))throw new TypeError("Unknown encoding: "+e);const r=0|E(t,e);let n=s(r);const i=n.write(t,e);return i!==r&&(n=n.slice(0,i)),n}(t,e);if(ArrayBuffer.isView(t))return function(t){if(Q(t,Uint8Array)){const e=new Uint8Array(t);return p(e.buffer,e.byteOffset,e.byteLength)}return h(t)}(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(Q(t,ArrayBuffer)||t&&Q(t.buffer,ArrayBuffer))return p(t,e,r);if("undefined"!=typeof SharedArrayBuffer&&(Q(t,SharedArrayBuffer)||t&&Q(t.buffer,SharedArrayBuffer)))return p(t,e,r);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');const n=t.valueOf&&t.valueOf();if(null!=n&&n!==t)return u.from(n,e,r);const i=function(t){if(u.isBuffer(t)){const e=0|d(t.length),r=s(e);return 0===r.length||t.copy(r,0,0,e),r}return void 0!==t.length?"number"!=typeof t.length||K(t.length)?s(0):h(t):"Buffer"===t.type&&Array.isArray(t.data)?h(t.data):void 0}(t);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return u.from(t[Symbol.toPrimitive]("string"),e,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function f(t){return l(t),s(t<0?0:0|d(t))}function h(t){const e=t.length<0?0:0|d(t.length),r=s(e);for(let n=0;n<e;n+=1)r[n]=255&t[n];return r}function p(t,e,r){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(r||0))throw new RangeError('"length" is outside of buffer bounds');let n;return n=void 0===e&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,e):new Uint8Array(t,e,r),Object.setPrototypeOf(n,u.prototype),n}function d(t){if(t>=a)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a.toString(16)+" bytes");return 0|t}function E(t,e){if(u.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||Q(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);const r=t.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let i=!1;for(;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return q(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return W(t).length;default:if(i)return n?-1:q(t).length;e=(""+e).toLowerCase(),i=!0}}function m(t,e,r){let n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return D(this,e,r);case"utf8":case"utf-8":return O(this,e,r);case"ascii":return S(this,e,r);case"latin1":case"binary":return b(this,e,r);case"base64":return C(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return M(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function T(t,e,r){const n=t[e];t[e]=t[r],t[r]=n}function _(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),K(r=+r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=u.from(e,n)),u.isBuffer(e))return 0===e.length?-1:g(t,e,r,n,i);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):g(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function g(t,e,r,n,i){let o,a=1,s=t.length,u=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;a=2,s/=2,u/=2,r/=2}function c(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(i){let n=-1;for(o=r;o<s;o++)if(c(t,o)===c(e,-1===n?0:o-n)){if(-1===n&&(n=o),o-n+1===u)return n*a}else-1!==n&&(o-=o-n),n=-1}else for(r+u>s&&(r=s-u),o=r;o>=0;o--){let r=!0;for(let n=0;n<u;n++)if(c(t,o+n)!==c(e,n)){r=!1;break}if(r)return o}return-1}function R(t,e,r,n){r=Number(r)||0;const i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;const o=e.length;let a;for(n>o/2&&(n=o/2),a=0;a<n;++a){const n=parseInt(e.substr(2*a,2),16);if(K(n))return a;t[r+a]=n}return a}function y(t,e,r,n){return $(q(e,t.length-r),t,r,n)}function A(t,e,r,n){return $(function(t){const e=[];for(let r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function I(t,e,r,n){return $(W(e),t,r,n)}function N(t,e,r,n){return $(function(t,e){let r,n,i;const o=[];for(let a=0;a<t.length&&!((e-=2)<0);++a)r=t.charCodeAt(a),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(e,t.length-r),t,r,n)}function C(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function O(t,e,r){r=Math.min(t.length,r);const n=[];let i=e;for(;i<r;){const e=t[i];let o=null,a=e>239?4:e>223?3:e>191?2:1;if(i+a<=r){let r,n,s,u;switch(a){case 1:e<128&&(o=e);break;case 2:r=t[i+1],128==(192&r)&&(u=(31&e)<<6|63&r,u>127&&(o=u));break;case 3:r=t[i+1],n=t[i+2],128==(192&r)&&128==(192&n)&&(u=(15&e)<<12|(63&r)<<6|63&n,u>2047&&(u<55296||u>57343)&&(o=u));break;case 4:r=t[i+1],n=t[i+2],s=t[i+3],128==(192&r)&&128==(192&n)&&128==(192&s)&&(u=(15&e)<<18|(63&r)<<12|(63&n)<<6|63&s,u>65535&&u<1114112&&(o=u))}}null===o?(o=65533,a=1):o>65535&&(o-=65536,n.push(o>>>10&1023|55296),o=56320|1023&o),n.push(o),i+=a}return function(t){const e=t.length;if(e<=v)return String.fromCharCode.apply(String,t);let r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=v));return r}(n)}e.kMaxLength=a,u.TYPED_ARRAY_SUPPORT=function(){try{const t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return!1}}(),u.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(u.prototype,"parent",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.buffer}}),Object.defineProperty(u.prototype,"offset",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.byteOffset}}),u.poolSize=8192,u.from=function(t,e,r){return c(t,e,r)},Object.setPrototypeOf(u.prototype,Uint8Array.prototype),Object.setPrototypeOf(u,Uint8Array),u.alloc=function(t,e,r){return function(t,e,r){return l(t),t<=0?s(t):void 0!==e?"string"==typeof r?s(t).fill(e,r):s(t).fill(e):s(t)}(t,e,r)},u.allocUnsafe=function(t){return f(t)},u.allocUnsafeSlow=function(t){return f(t)},u.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==u.prototype},u.compare=function(t,e){if(Q(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),Q(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;let r=t.length,n=e.length;for(let i=0,o=Math.min(r,n);i<o;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);let r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;const n=u.allocUnsafe(e);let i=0;for(r=0;r<t.length;++r){let e=t[r];if(Q(e,Uint8Array))i+e.length>n.length?(u.isBuffer(e)||(e=u.from(e)),e.copy(n,i)):Uint8Array.prototype.set.call(n,e,i);else{if(!u.isBuffer(e))throw new TypeError('"list" argument must be an Array of Buffers');e.copy(n,i)}i+=e.length}return n},u.byteLength=E,u.prototype._isBuffer=!0,u.prototype.swap16=function(){const t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let e=0;e<t;e+=2)T(this,e,e+1);return this},u.prototype.swap32=function(){const t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let e=0;e<t;e+=4)T(this,e,e+3),T(this,e+1,e+2);return this},u.prototype.swap64=function(){const t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let e=0;e<t;e+=8)T(this,e,e+7),T(this,e+1,e+6),T(this,e+2,e+5),T(this,e+3,e+4);return this},u.prototype.toString=function(){const t=this.length;return 0===t?"":0===arguments.length?O(this,0,t):m.apply(this,arguments)},u.prototype.toLocaleString=u.prototype.toString,u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){let t="";const r=e.INSPECT_MAX_BYTES;return t=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(t+=" ... "),"<Buffer "+t+">"},o&&(u.prototype[o]=u.prototype.inspect),u.prototype.compare=function(t,e,r,n,i){if(Q(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),!u.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return-1;if(e>=r)return 1;if(this===t)return 0;let o=(i>>>=0)-(n>>>=0),a=(r>>>=0)-(e>>>=0);const s=Math.min(o,a),c=this.slice(n,i),l=t.slice(e,r);for(let t=0;t<s;++t)if(c[t]!==l[t]){o=c[t],a=l[t];break}return o<a?-1:a<o?1:0},u.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},u.prototype.indexOf=function(t,e,r){return _(this,t,e,r,!0)},u.prototype.lastIndexOf=function(t,e,r){return _(this,t,e,r,!1)},u.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}const i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let o=!1;for(;;)switch(n){case"hex":return R(this,t,e,r);case"utf8":case"utf-8":return y(this,t,e,r);case"ascii":case"latin1":case"binary":return A(this,t,e,r);case"base64":return I(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return N(this,t,e,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const v=4096;function S(t,e,r){let n="";r=Math.min(t.length,r);for(let i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function b(t,e,r){let n="";r=Math.min(t.length,r);for(let i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function D(t,e,r){const n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);let i="";for(let n=e;n<r;++n)i+=z[t[n]];return i}function M(t,e,r){const n=t.slice(e,r);let i="";for(let t=0;t<n.length-1;t+=2)i+=String.fromCharCode(n[t]+256*n[t+1]);return i}function w(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function P(t,e,r,n,i,o){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function L(t,e,r,n,i){j(e,n,i,t,r,7);let o=Number(e&BigInt(4294967295));t[r++]=o,o>>=8,t[r++]=o,o>>=8,t[r++]=o,o>>=8,t[r++]=o;let a=Number(e>>BigInt(32)&BigInt(4294967295));return t[r++]=a,a>>=8,t[r++]=a,a>>=8,t[r++]=a,a>>=8,t[r++]=a,r}function B(t,e,r,n,i){j(e,n,i,t,r,7);let o=Number(e&BigInt(4294967295));t[r+7]=o,o>>=8,t[r+6]=o,o>>=8,t[r+5]=o,o>>=8,t[r+4]=o;let a=Number(e>>BigInt(32)&BigInt(4294967295));return t[r+3]=a,a>>=8,t[r+2]=a,a>>=8,t[r+1]=a,a>>=8,t[r]=a,r+8}function F(t,e,r,n,i,o){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function U(t,e,r,n,o){return e=+e,r>>>=0,o||F(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function x(t,e,r,n,o){return e=+e,r>>>=0,o||F(t,0,r,8),i.write(t,e,r,n,52,8),r+8}u.prototype.slice=function(t,e){const r=this.length;(t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t);const n=this.subarray(t,e);return Object.setPrototypeOf(n,u.prototype),n},u.prototype.readUintLE=u.prototype.readUIntLE=function(t,e,r){t>>>=0,e>>>=0,r||w(t,e,this.length);let n=this[t],i=1,o=0;for(;++o<e&&(i*=256);)n+=this[t+o]*i;return n},u.prototype.readUintBE=u.prototype.readUIntBE=function(t,e,r){t>>>=0,e>>>=0,r||w(t,e,this.length);let n=this[t+--e],i=1;for(;e>0&&(i*=256);)n+=this[t+--e]*i;return n},u.prototype.readUint8=u.prototype.readUInt8=function(t,e){return t>>>=0,e||w(t,1,this.length),this[t]},u.prototype.readUint16LE=u.prototype.readUInt16LE=function(t,e){return t>>>=0,e||w(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUint16BE=u.prototype.readUInt16BE=function(t,e){return t>>>=0,e||w(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUint32LE=u.prototype.readUInt32LE=function(t,e){return t>>>=0,e||w(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUint32BE=u.prototype.readUInt32BE=function(t,e){return t>>>=0,e||w(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readBigUInt64LE=J((function(t){V(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||k(t,this.length-8);const n=e+256*this[++t]+65536*this[++t]+this[++t]*2**24,i=this[++t]+256*this[++t]+65536*this[++t]+r*2**24;return BigInt(n)+(BigInt(i)<<BigInt(32))})),u.prototype.readBigUInt64BE=J((function(t){V(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||k(t,this.length-8);const n=e*2**24+65536*this[++t]+256*this[++t]+this[++t],i=this[++t]*2**24+65536*this[++t]+256*this[++t]+r;return(BigInt(n)<<BigInt(32))+BigInt(i)})),u.prototype.readIntLE=function(t,e,r){t>>>=0,e>>>=0,r||w(t,e,this.length);let n=this[t],i=1,o=0;for(;++o<e&&(i*=256);)n+=this[t+o]*i;return i*=128,n>=i&&(n-=Math.pow(2,8*e)),n},u.prototype.readIntBE=function(t,e,r){t>>>=0,e>>>=0,r||w(t,e,this.length);let n=e,i=1,o=this[t+--n];for(;n>0&&(i*=256);)o+=this[t+--n]*i;return i*=128,o>=i&&(o-=Math.pow(2,8*e)),o},u.prototype.readInt8=function(t,e){return t>>>=0,e||w(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){t>>>=0,e||w(t,2,this.length);const r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(t,e){t>>>=0,e||w(t,2,this.length);const r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(t,e){return t>>>=0,e||w(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return t>>>=0,e||w(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readBigInt64LE=J((function(t){V(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||k(t,this.length-8);const n=this[t+4]+256*this[t+5]+65536*this[t+6]+(r<<24);return(BigInt(n)<<BigInt(32))+BigInt(e+256*this[++t]+65536*this[++t]+this[++t]*2**24)})),u.prototype.readBigInt64BE=J((function(t){V(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||k(t,this.length-8);const n=(e<<24)+65536*this[++t]+256*this[++t]+this[++t];return(BigInt(n)<<BigInt(32))+BigInt(this[++t]*2**24+65536*this[++t]+256*this[++t]+r)})),u.prototype.readFloatLE=function(t,e){return t>>>=0,e||w(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return t>>>=0,e||w(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return t>>>=0,e||w(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return t>>>=0,e||w(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUintLE=u.prototype.writeUIntLE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||P(this,t,e,r,Math.pow(2,8*r)-1,0);let i=1,o=0;for(this[e]=255&t;++o<r&&(i*=256);)this[e+o]=t/i&255;return e+r},u.prototype.writeUintBE=u.prototype.writeUIntBE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||P(this,t,e,r,Math.pow(2,8*r)-1,0);let i=r-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+r},u.prototype.writeUint8=u.prototype.writeUInt8=function(t,e,r){return t=+t,e>>>=0,r||P(this,t,e,1,255,0),this[e]=255&t,e+1},u.prototype.writeUint16LE=u.prototype.writeUInt16LE=function(t,e,r){return t=+t,e>>>=0,r||P(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},u.prototype.writeUint16BE=u.prototype.writeUInt16BE=function(t,e,r){return t=+t,e>>>=0,r||P(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},u.prototype.writeUint32LE=u.prototype.writeUInt32LE=function(t,e,r){return t=+t,e>>>=0,r||P(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},u.prototype.writeUint32BE=u.prototype.writeUInt32BE=function(t,e,r){return t=+t,e>>>=0,r||P(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},u.prototype.writeBigUInt64LE=J((function(t,e=0){return L(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),u.prototype.writeBigUInt64BE=J((function(t,e=0){return B(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),u.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e>>>=0,!n){const n=Math.pow(2,8*r-1);P(this,t,e,r,n-1,-n)}let i=0,o=1,a=0;for(this[e]=255&t;++i<r&&(o*=256);)t<0&&0===a&&0!==this[e+i-1]&&(a=1),this[e+i]=(t/o>>0)-a&255;return e+r},u.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e>>>=0,!n){const n=Math.pow(2,8*r-1);P(this,t,e,r,n-1,-n)}let i=r-1,o=1,a=0;for(this[e+i]=255&t;--i>=0&&(o*=256);)t<0&&0===a&&0!==this[e+i+1]&&(a=1),this[e+i]=(t/o>>0)-a&255;return e+r},u.prototype.writeInt8=function(t,e,r){return t=+t,e>>>=0,r||P(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,r){return t=+t,e>>>=0,r||P(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},u.prototype.writeInt16BE=function(t,e,r){return t=+t,e>>>=0,r||P(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},u.prototype.writeInt32LE=function(t,e,r){return t=+t,e>>>=0,r||P(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},u.prototype.writeInt32BE=function(t,e,r){return t=+t,e>>>=0,r||P(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},u.prototype.writeBigInt64LE=J((function(t,e=0){return L(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),u.prototype.writeBigInt64BE=J((function(t,e=0){return B(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),u.prototype.writeFloatLE=function(t,e,r){return U(this,t,e,!0,r)},u.prototype.writeFloatBE=function(t,e,r){return U(this,t,e,!1,r)},u.prototype.writeDoubleLE=function(t,e,r){return x(this,t,e,!0,r)},u.prototype.writeDoubleBE=function(t,e,r){return x(this,t,e,!1,r)},u.prototype.copy=function(t,e,r,n){if(!u.isBuffer(t))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);const i=n-r;return this===t&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(e,r,n):Uint8Array.prototype.set.call(t,this.subarray(r,n),e),i},u.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===t.length){const e=t.charCodeAt(0);("utf8"===n&&e<128||"latin1"===n)&&(t=e)}}else"number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;let i;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(i=e;i<r;++i)this[i]=t;else{const o=u.isBuffer(t)?t:u.from(t,n),a=o.length;if(0===a)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(i=0;i<r-e;++i)this[i+e]=o[i%a]}return this};const Y={};function X(t,e,r){Y[t]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:e.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${t}]`,this.stack,delete this.name}get code(){return t}set code(t){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:t,writable:!0})}toString(){return`${this.name} [${t}]: ${this.message}`}}}function G(t){let e="",r=t.length;const n="-"===t[0]?1:0;for(;r>=n+4;r-=3)e=`_${t.slice(r-3,r)}${e}`;return`${t.slice(0,r)}${e}`}function j(t,e,r,n,i,o){if(t>r||t<e){const n="bigint"==typeof e?"n":"";let i;throw i=o>3?0===e||e===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(o+1)}${n}`:`>= -(2${n} ** ${8*(o+1)-1}${n}) and < 2 ** ${8*(o+1)-1}${n}`:`>= ${e}${n} and <= ${r}${n}`,new Y.ERR_OUT_OF_RANGE("value",i,t)}!function(t,e,r){V(e,"offset"),void 0!==t[e]&&void 0!==t[e+r]||k(e,t.length-(r+1))}(n,i,o)}function V(t,e){if("number"!=typeof t)throw new Y.ERR_INVALID_ARG_TYPE(e,"number",t)}function k(t,e,r){if(Math.floor(t)!==t)throw V(t,r),new Y.ERR_OUT_OF_RANGE(r||"offset","an integer",t);if(e<0)throw new Y.ERR_BUFFER_OUT_OF_BOUNDS;throw new Y.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${e}`,t)}X("ERR_BUFFER_OUT_OF_BOUNDS",(function(t){return t?`${t} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),X("ERR_INVALID_ARG_TYPE",(function(t,e){return`The "${t}" argument must be of type number. Received type ${typeof e}`}),TypeError),X("ERR_OUT_OF_RANGE",(function(t,e,r){let n=`The value of "${t}" is out of range.`,i=r;return Number.isInteger(r)&&Math.abs(r)>2**32?i=G(String(r)):"bigint"==typeof r&&(i=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(i=G(i)),i+="n"),n+=` It must be ${e}. Received ${i}`,n}),RangeError);const H=/[^+/0-9A-Za-z-_]/g;function q(t,e){let r;e=e||1/0;const n=t.length;let i=null;const o=[];for(let a=0;a<n;++a){if(r=t.charCodeAt(a),r>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(a+1===n){(e-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;o.push(r)}else if(r<2048){if((e-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function W(t){return n.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace(H,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function $(t,e,r,n){let i;for(i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}function Q(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function K(t){return t!=t}const z=function(){const t="0123456789abcdef",e=new Array(256);for(let r=0;r<16;++r){const n=16*r;for(let i=0;i<16;++i)e[n+i]=t[r]+t[i]}return e}();function J(t){return"undefined"==typeof BigInt?Z:t}function Z(){throw new Error("BigInt not supported")}},645:(t,e)=>{e.read=function(t,e,r,n,i){var o,a,s=8*i-n-1,u=(1<<s)-1,c=u>>1,l=-7,f=r?i-1:0,h=r?-1:1,p=t[e+f];for(f+=h,o=p&(1<<-l)-1,p>>=-l,l+=s;l>0;o=256*o+t[e+f],f+=h,l-=8);for(a=o&(1<<-l)-1,o>>=-l,l+=n;l>0;a=256*a+t[e+f],f+=h,l-=8);if(0===o)o=1-c;else{if(o===u)return a?NaN:1/0*(p?-1:1);a+=Math.pow(2,n),o-=c}return(p?-1:1)*a*Math.pow(2,o-n)},e.write=function(t,e,r,n,i,o){var a,s,u,c=8*o-i-1,l=(1<<c)-1,f=l>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:o-1,d=n?1:-1,E=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,a=l):(a=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-a))<1&&(a--,u*=2),(e+=a+f>=1?h/u:h*Math.pow(2,1-f))*u>=2&&(a++,u/=2),a+f>=l?(s=0,a=l):a+f>=1?(s=(e*u-1)*Math.pow(2,i),a+=f):(s=e*Math.pow(2,f-1)*Math.pow(2,i),a=0));i>=8;t[r+p]=255&s,p+=d,s/=256,i-=8);for(a=a<<i|s,c+=i;c>0;t[r+p]=255&a,p+=d,a/=256,c-=8);t[r+p-d]|=128*E}},509:(t,e,r)=>{var n=r(764),i=n.Buffer;function o(t,e){for(var r in t)e[r]=t[r]}function a(t,e,r){return i(t,e,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=n:(o(n,e),e.Buffer=a),a.prototype=Object.create(i.prototype),o(i,a),a.from=function(t,e,r){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,r)},a.alloc=function(t,e,r){if("number"!=typeof t)throw new TypeError("Argument must be a number");var n=i(t);return void 0!==e?"string"==typeof r?n.fill(e,r):n.fill(e):n.fill(0),n},a.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},a.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n.SlowBuffer(t)}},99:(t,e,r)=>{!function(t){t.parser=function(t,e){return new i(t,e)},t.SAXParser=i,t.SAXStream=a,t.createStream=function(t,e){return new a(t,e)},t.MAX_BUFFER_LENGTH=65536;var e,n=["comment","sgmlDecl","textNode","tagName","doctype","procInstName","procInstBody","entity","attribName","attribValue","cdata","script"];function i(e,r){if(!(this instanceof i))return new i(e,r);var o=this;!function(t){for(var e=0,r=n.length;e<r;e++)t[n[e]]=""}(o),o.q=o.c="",o.bufferCheckPosition=t.MAX_BUFFER_LENGTH,o.opt=r||{},o.opt.lowercase=o.opt.lowercase||o.opt.lowercasetags,o.looseCase=o.opt.lowercase?"toLowerCase":"toUpperCase",o.tags=[],o.closed=o.closedRoot=o.sawRoot=!1,o.tag=o.error=null,o.strict=!!e,o.noscript=!(!e&&!o.opt.noscript),o.state=A.BEGIN,o.strictEntities=o.opt.strictEntities,o.ENTITIES=o.strictEntities?Object.create(t.XML_ENTITIES):Object.create(t.ENTITIES),o.attribList=[],o.opt.xmlns&&(o.ns=Object.create(c)),o.trackPosition=!1!==o.opt.position,o.trackPosition&&(o.position=o.line=o.column=0),N(o,"onready")}t.EVENTS=["text","processinginstruction","sgmldeclaration","doctype","comment","opentagstart","attribute","opentag","closetag","opencdata","cdata","closecdata","error","end","ready","script","opennamespace","closenamespace"],Object.create||(Object.create=function(t){function e(){}return e.prototype=t,new e}),Object.keys||(Object.keys=function(t){var e=[];for(var r in t)t.hasOwnProperty(r)&&e.push(r);return e}),i.prototype={end:function(){b(this)},write:function(e){var r=this;if(this.error)throw this.error;if(r.closed)return S(r,"Cannot write after close. Assign an onready handler.");if(null===e)return b(r);"object"==typeof e&&(e=e.toString());for(var i=0,o="";o=x(e,i++),r.c=o,o;)switch(r.trackPosition&&(r.position++,"\n"===o?(r.line++,r.column=0):r.column++),r.state){case A.BEGIN:if(r.state=A.BEGIN_WHITESPACE,"\ufeff"===o)continue;U(r,o);continue;case A.BEGIN_WHITESPACE:U(r,o);continue;case A.TEXT:if(r.sawRoot&&!r.closedRoot){for(var a=i-1;o&&"<"!==o&&"&"!==o;)(o=x(e,i++))&&r.trackPosition&&(r.position++,"\n"===o?(r.line++,r.column=0):r.column++);r.textNode+=e.substring(a,i-1)}"<"!==o||r.sawRoot&&r.closedRoot&&!r.strict?(d(o)||r.sawRoot&&!r.closedRoot||D(r,"Text data outside of root node."),"&"===o?r.state=A.TEXT_ENTITY:r.textNode+=o):(r.state=A.OPEN_WAKA,r.startTagPosition=r.position);continue;case A.SCRIPT:"<"===o?r.state=A.SCRIPT_ENDING:r.script+=o;continue;case A.SCRIPT_ENDING:"/"===o?r.state=A.CLOSE_TAG:(r.script+="<"+o,r.state=A.SCRIPT);continue;case A.OPEN_WAKA:if("!"===o)r.state=A.SGML_DECL,r.sgmlDecl="";else if(d(o));else if(T(l,o))r.state=A.OPEN_TAG,r.tagName=o;else if("/"===o)r.state=A.CLOSE_TAG,r.tagName="";else if("?"===o)r.state=A.PROC_INST,r.procInstName=r.procInstBody="";else{if(D(r,"Unencoded <"),r.startTagPosition+1<r.position){var s=r.position-r.startTagPosition;o=new Array(s).join(" ")+o}r.textNode+="<"+o,r.state=A.TEXT}continue;case A.SGML_DECL:"[CDATA["===(r.sgmlDecl+o).toUpperCase()?(C(r,"onopencdata"),r.state=A.CDATA,r.sgmlDecl="",r.cdata=""):r.sgmlDecl+o==="--"?(r.state=A.COMMENT,r.comment="",r.sgmlDecl=""):"DOCTYPE"===(r.sgmlDecl+o).toUpperCase()?(r.state=A.DOCTYPE,(r.doctype||r.sawRoot)&&D(r,"Inappropriately located doctype declaration"),r.doctype="",r.sgmlDecl=""):">"===o?(C(r,"onsgmldeclaration",r.sgmlDecl),r.sgmlDecl="",r.state=A.TEXT):E(o)?(r.state=A.SGML_DECL_QUOTED,r.sgmlDecl+=o):r.sgmlDecl+=o;continue;case A.SGML_DECL_QUOTED:o===r.q&&(r.state=A.SGML_DECL,r.q=""),r.sgmlDecl+=o;continue;case A.DOCTYPE:">"===o?(r.state=A.TEXT,C(r,"ondoctype",r.doctype),r.doctype=!0):(r.doctype+=o,"["===o?r.state=A.DOCTYPE_DTD:E(o)&&(r.state=A.DOCTYPE_QUOTED,r.q=o));continue;case A.DOCTYPE_QUOTED:r.doctype+=o,o===r.q&&(r.q="",r.state=A.DOCTYPE);continue;case A.DOCTYPE_DTD:r.doctype+=o,"]"===o?r.state=A.DOCTYPE:E(o)&&(r.state=A.DOCTYPE_DTD_QUOTED,r.q=o);continue;case A.DOCTYPE_DTD_QUOTED:r.doctype+=o,o===r.q&&(r.state=A.DOCTYPE_DTD,r.q="");continue;case A.COMMENT:"-"===o?r.state=A.COMMENT_ENDING:r.comment+=o;continue;case A.COMMENT_ENDING:"-"===o?(r.state=A.COMMENT_ENDED,r.comment=v(r.opt,r.comment),r.comment&&C(r,"oncomment",r.comment),r.comment=""):(r.comment+="-"+o,r.state=A.COMMENT);continue;case A.COMMENT_ENDED:">"!==o?(D(r,"Malformed comment"),r.comment+="--"+o,r.state=A.COMMENT):r.state=A.TEXT;continue;case A.CDATA:"]"===o?r.state=A.CDATA_ENDING:r.cdata+=o;continue;case A.CDATA_ENDING:"]"===o?r.state=A.CDATA_ENDING_2:(r.cdata+="]"+o,r.state=A.CDATA);continue;case A.CDATA_ENDING_2:">"===o?(r.cdata&&C(r,"oncdata",r.cdata),C(r,"onclosecdata"),r.cdata="",r.state=A.TEXT):"]"===o?r.cdata+="]":(r.cdata+="]]"+o,r.state=A.CDATA);continue;case A.PROC_INST:"?"===o?r.state=A.PROC_INST_ENDING:d(o)?r.state=A.PROC_INST_BODY:r.procInstName+=o;continue;case A.PROC_INST_BODY:if(!r.procInstBody&&d(o))continue;"?"===o?r.state=A.PROC_INST_ENDING:r.procInstBody+=o;continue;case A.PROC_INST_ENDING:">"===o?(C(r,"onprocessinginstruction",{name:r.procInstName,body:r.procInstBody}),r.procInstName=r.procInstBody="",r.state=A.TEXT):(r.procInstBody+="?"+o,r.state=A.PROC_INST_BODY);continue;case A.OPEN_TAG:T(f,o)?r.tagName+=o:(M(r),">"===o?L(r):"/"===o?r.state=A.OPEN_TAG_SLASH:(d(o)||D(r,"Invalid character in tag name"),r.state=A.ATTRIB));continue;case A.OPEN_TAG_SLASH:">"===o?(L(r,!0),B(r)):(D(r,"Forward-slash in opening tag not followed by >"),r.state=A.ATTRIB);continue;case A.ATTRIB:if(d(o))continue;">"===o?L(r):"/"===o?r.state=A.OPEN_TAG_SLASH:T(l,o)?(r.attribName=o,r.attribValue="",r.state=A.ATTRIB_NAME):D(r,"Invalid attribute name");continue;case A.ATTRIB_NAME:"="===o?r.state=A.ATTRIB_VALUE:">"===o?(D(r,"Attribute without value"),r.attribValue=r.attribName,P(r),L(r)):d(o)?r.state=A.ATTRIB_NAME_SAW_WHITE:T(f,o)?r.attribName+=o:D(r,"Invalid attribute name");continue;case A.ATTRIB_NAME_SAW_WHITE:if("="===o)r.state=A.ATTRIB_VALUE;else{if(d(o))continue;D(r,"Attribute without value"),r.tag.attributes[r.attribName]="",r.attribValue="",C(r,"onattribute",{name:r.attribName,value:""}),r.attribName="",">"===o?L(r):T(l,o)?(r.attribName=o,r.state=A.ATTRIB_NAME):(D(r,"Invalid attribute name"),r.state=A.ATTRIB)}continue;case A.ATTRIB_VALUE:if(d(o))continue;E(o)?(r.q=o,r.state=A.ATTRIB_VALUE_QUOTED):(D(r,"Unquoted attribute value"),r.state=A.ATTRIB_VALUE_UNQUOTED,r.attribValue=o);continue;case A.ATTRIB_VALUE_QUOTED:if(o!==r.q){"&"===o?r.state=A.ATTRIB_VALUE_ENTITY_Q:r.attribValue+=o;continue}P(r),r.q="",r.state=A.ATTRIB_VALUE_CLOSED;continue;case A.ATTRIB_VALUE_CLOSED:d(o)?r.state=A.ATTRIB:">"===o?L(r):"/"===o?r.state=A.OPEN_TAG_SLASH:T(l,o)?(D(r,"No whitespace between attributes"),r.attribName=o,r.attribValue="",r.state=A.ATTRIB_NAME):D(r,"Invalid attribute name");continue;case A.ATTRIB_VALUE_UNQUOTED:if(!m(o)){"&"===o?r.state=A.ATTRIB_VALUE_ENTITY_U:r.attribValue+=o;continue}P(r),">"===o?L(r):r.state=A.ATTRIB;continue;case A.CLOSE_TAG:if(r.tagName)">"===o?B(r):T(f,o)?r.tagName+=o:r.script?(r.script+="</"+r.tagName,r.tagName="",r.state=A.SCRIPT):(d(o)||D(r,"Invalid tagname in closing tag"),r.state=A.CLOSE_TAG_SAW_WHITE);else{if(d(o))continue;_(l,o)?r.script?(r.script+="</"+o,r.state=A.SCRIPT):D(r,"Invalid tagname in closing tag."):r.tagName=o}continue;case A.CLOSE_TAG_SAW_WHITE:if(d(o))continue;">"===o?B(r):D(r,"Invalid characters in closing tag");continue;case A.TEXT_ENTITY:case A.ATTRIB_VALUE_ENTITY_Q:case A.ATTRIB_VALUE_ENTITY_U:var u,c;switch(r.state){case A.TEXT_ENTITY:u=A.TEXT,c="textNode";break;case A.ATTRIB_VALUE_ENTITY_Q:u=A.ATTRIB_VALUE_QUOTED,c="attribValue";break;case A.ATTRIB_VALUE_ENTITY_U:u=A.ATTRIB_VALUE_UNQUOTED,c="attribValue"}";"===o?(r[c]+=F(r),r.entity="",r.state=u):T(r.entity.length?p:h,o)?r.entity+=o:(D(r,"Invalid character in entity name"),r[c]+="&"+r.entity+o,r.entity="",r.state=u);continue;default:throw new Error(r,"Unknown state: "+r.state)}return r.position>=r.bufferCheckPosition&&function(e){for(var r=Math.max(t.MAX_BUFFER_LENGTH,10),i=0,o=0,a=n.length;o<a;o++){var s=e[n[o]].length;if(s>r)switch(n[o]){case"textNode":O(e);break;case"cdata":C(e,"oncdata",e.cdata),e.cdata="";break;case"script":C(e,"onscript",e.script),e.script="";break;default:S(e,"Max buffer length exceeded: "+n[o])}i=Math.max(i,s)}var u=t.MAX_BUFFER_LENGTH-i;e.bufferCheckPosition=u+e.position}(r),r},resume:function(){return this.error=null,this},close:function(){return this.write(null)},flush:function(){var t;O(t=this),""!==t.cdata&&(C(t,"oncdata",t.cdata),t.cdata=""),""!==t.script&&(C(t,"onscript",t.script),t.script="")}};try{e=Object(function(){var t=new Error("Cannot find module 'stream'");throw t.code="MODULE_NOT_FOUND",t}())}catch(t){e=function(){}}var o=t.EVENTS.filter((function(t){return"error"!==t&&"end"!==t}));function a(t,r){if(!(this instanceof a))return new a(t,r);e.apply(this),this._parser=new i(t,r),this.writable=!0,this.readable=!0;var n=this;this._parser.onend=function(){n.emit("end")},this._parser.onerror=function(t){n.emit("error",t),n._parser.error=null},this._decoder=null,o.forEach((function(t){Object.defineProperty(n,"on"+t,{get:function(){return n._parser["on"+t]},set:function(e){if(!e)return n.removeAllListeners(t),n._parser["on"+t]=e,e;n.on(t,e)},enumerable:!0,configurable:!1})}))}a.prototype=Object.create(e.prototype,{constructor:{value:a}}),a.prototype.write=function(t){if("function"==typeof Buffer&&"function"==typeof Buffer.isBuffer&&Buffer.isBuffer(t)){if(!this._decoder){var e=r(553).s;this._decoder=new e("utf8")}t=this._decoder.write(t)}return this._parser.write(t.toString()),this.emit("data",t),!0},a.prototype.end=function(t){return t&&t.length&&this.write(t),this._parser.end(),!0},a.prototype.on=function(t,r){var n=this;return n._parser["on"+t]||-1===o.indexOf(t)||(n._parser["on"+t]=function(){var e=1===arguments.length?[arguments[0]]:Array.apply(null,arguments);e.splice(0,0,t),n.emit.apply(n,e)}),e.prototype.on.call(n,t,r)};var s="http://www.w3.org/XML/1998/namespace",u="http://www.w3.org/2000/xmlns/",c={xml:s,xmlns:u},l=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,f=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/,h=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,p=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;function d(t){return" "===t||"\n"===t||"\r"===t||"\t"===t}function E(t){return'"'===t||"'"===t}function m(t){return">"===t||d(t)}function T(t,e){return t.test(e)}function _(t,e){return!T(t,e)}var g,R,y,A=0;for(var I in t.STATE={BEGIN:A++,BEGIN_WHITESPACE:A++,TEXT:A++,TEXT_ENTITY:A++,OPEN_WAKA:A++,SGML_DECL:A++,SGML_DECL_QUOTED:A++,DOCTYPE:A++,DOCTYPE_QUOTED:A++,DOCTYPE_DTD:A++,DOCTYPE_DTD_QUOTED:A++,COMMENT_STARTING:A++,COMMENT:A++,COMMENT_ENDING:A++,COMMENT_ENDED:A++,CDATA:A++,CDATA_ENDING:A++,CDATA_ENDING_2:A++,PROC_INST:A++,PROC_INST_BODY:A++,PROC_INST_ENDING:A++,OPEN_TAG:A++,OPEN_TAG_SLASH:A++,ATTRIB:A++,ATTRIB_NAME:A++,ATTRIB_NAME_SAW_WHITE:A++,ATTRIB_VALUE:A++,ATTRIB_VALUE_QUOTED:A++,ATTRIB_VALUE_CLOSED:A++,ATTRIB_VALUE_UNQUOTED:A++,ATTRIB_VALUE_ENTITY_Q:A++,ATTRIB_VALUE_ENTITY_U:A++,CLOSE_TAG:A++,CLOSE_TAG_SAW_WHITE:A++,SCRIPT:A++,SCRIPT_ENDING:A++},t.XML_ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'"},t.ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'",AElig:198,Aacute:193,Acirc:194,Agrave:192,Aring:197,Atilde:195,Auml:196,Ccedil:199,ETH:208,Eacute:201,Ecirc:202,Egrave:200,Euml:203,Iacute:205,Icirc:206,Igrave:204,Iuml:207,Ntilde:209,Oacute:211,Ocirc:212,Ograve:210,Oslash:216,Otilde:213,Ouml:214,THORN:222,Uacute:218,Ucirc:219,Ugrave:217,Uuml:220,Yacute:221,aacute:225,acirc:226,aelig:230,agrave:224,aring:229,atilde:227,auml:228,ccedil:231,eacute:233,ecirc:234,egrave:232,eth:240,euml:235,iacute:237,icirc:238,igrave:236,iuml:239,ntilde:241,oacute:243,ocirc:244,ograve:242,oslash:248,otilde:245,ouml:246,szlig:223,thorn:254,uacute:250,ucirc:251,ugrave:249,uuml:252,yacute:253,yuml:255,copy:169,reg:174,nbsp:160,iexcl:161,cent:162,pound:163,curren:164,yen:165,brvbar:166,sect:167,uml:168,ordf:170,laquo:171,not:172,shy:173,macr:175,deg:176,plusmn:177,sup1:185,sup2:178,sup3:179,acute:180,micro:181,para:182,middot:183,cedil:184,ordm:186,raquo:187,frac14:188,frac12:189,frac34:190,iquest:191,times:215,divide:247,OElig:338,oelig:339,Scaron:352,scaron:353,Yuml:376,fnof:402,circ:710,tilde:732,Alpha:913,Beta:914,Gamma:915,Delta:916,Epsilon:917,Zeta:918,Eta:919,Theta:920,Iota:921,Kappa:922,Lambda:923,Mu:924,Nu:925,Xi:926,Omicron:927,Pi:928,Rho:929,Sigma:931,Tau:932,Upsilon:933,Phi:934,Chi:935,Psi:936,Omega:937,alpha:945,beta:946,gamma:947,delta:948,epsilon:949,zeta:950,eta:951,theta:952,iota:953,kappa:954,lambda:955,mu:956,nu:957,xi:958,omicron:959,pi:960,rho:961,sigmaf:962,sigma:963,tau:964,upsilon:965,phi:966,chi:967,psi:968,omega:969,thetasym:977,upsih:978,piv:982,ensp:8194,emsp:8195,thinsp:8201,zwnj:8204,zwj:8205,lrm:8206,rlm:8207,ndash:8211,mdash:8212,lsquo:8216,rsquo:8217,sbquo:8218,ldquo:8220,rdquo:8221,bdquo:8222,dagger:8224,Dagger:8225,bull:8226,hellip:8230,permil:8240,prime:8242,Prime:8243,lsaquo:8249,rsaquo:8250,oline:8254,frasl:8260,euro:8364,image:8465,weierp:8472,real:8476,trade:8482,alefsym:8501,larr:8592,uarr:8593,rarr:8594,darr:8595,harr:8596,crarr:8629,lArr:8656,uArr:8657,rArr:8658,dArr:8659,hArr:8660,forall:8704,part:8706,exist:8707,empty:8709,nabla:8711,isin:8712,notin:8713,ni:8715,prod:8719,sum:8721,minus:8722,lowast:8727,radic:8730,prop:8733,infin:8734,ang:8736,and:8743,or:8744,cap:8745,cup:8746,int:8747,there4:8756,sim:8764,cong:8773,asymp:8776,ne:8800,equiv:8801,le:8804,ge:8805,sub:8834,sup:8835,nsub:8836,sube:8838,supe:8839,oplus:8853,otimes:8855,perp:8869,sdot:8901,lceil:8968,rceil:8969,lfloor:8970,rfloor:8971,lang:9001,rang:9002,loz:9674,spades:9824,clubs:9827,hearts:9829,diams:9830},Object.keys(t.ENTITIES).forEach((function(e){var r=t.ENTITIES[e],n="number"==typeof r?String.fromCharCode(r):r;t.ENTITIES[e]=n})),t.STATE)t.STATE[t.STATE[I]]=I;function N(t,e,r){t[e]&&t[e](r)}function C(t,e,r){t.textNode&&O(t),N(t,e,r)}function O(t){t.textNode=v(t.opt,t.textNode),t.textNode&&N(t,"ontext",t.textNode),t.textNode=""}function v(t,e){return t.trim&&(e=e.trim()),t.normalize&&(e=e.replace(/\s+/g," ")),e}function S(t,e){return O(t),t.trackPosition&&(e+="\nLine: "+t.line+"\nColumn: "+t.column+"\nChar: "+t.c),e=new Error(e),t.error=e,N(t,"onerror",e),t}function b(t){return t.sawRoot&&!t.closedRoot&&D(t,"Unclosed root tag"),t.state!==A.BEGIN&&t.state!==A.BEGIN_WHITESPACE&&t.state!==A.TEXT&&S(t,"Unexpected end"),O(t),t.c="",t.closed=!0,N(t,"onend"),i.call(t,t.strict,t.opt),t}function D(t,e){if("object"!=typeof t||!(t instanceof i))throw new Error("bad call to strictFail");t.strict&&S(t,e)}function M(t){t.strict||(t.tagName=t.tagName[t.looseCase]());var e=t.tags[t.tags.length-1]||t,r=t.tag={name:t.tagName,attributes:{}};t.opt.xmlns&&(r.ns=e.ns),t.attribList.length=0,C(t,"onopentagstart",r)}function w(t,e){var r=t.indexOf(":")<0?["",t]:t.split(":"),n=r[0],i=r[1];return e&&"xmlns"===t&&(n="xmlns",i=""),{prefix:n,local:i}}function P(t){if(t.strict||(t.attribName=t.attribName[t.looseCase]()),-1!==t.attribList.indexOf(t.attribName)||t.tag.attributes.hasOwnProperty(t.attribName))t.attribName=t.attribValue="";else{if(t.opt.xmlns){var e=w(t.attribName,!0),r=e.prefix,n=e.local;if("xmlns"===r)if("xml"===n&&t.attribValue!==s)D(t,"xml: prefix must be bound to "+s+"\nActual: "+t.attribValue);else if("xmlns"===n&&t.attribValue!==u)D(t,"xmlns: prefix must be bound to "+u+"\nActual: "+t.attribValue);else{var i=t.tag,o=t.tags[t.tags.length-1]||t;i.ns===o.ns&&(i.ns=Object.create(o.ns)),i.ns[n]=t.attribValue}t.attribList.push([t.attribName,t.attribValue])}else t.tag.attributes[t.attribName]=t.attribValue,C(t,"onattribute",{name:t.attribName,value:t.attribValue});t.attribName=t.attribValue=""}}function L(t,e){if(t.opt.xmlns){var r=t.tag,n=w(t.tagName);r.prefix=n.prefix,r.local=n.local,r.uri=r.ns[n.prefix]||"",r.prefix&&!r.uri&&(D(t,"Unbound namespace prefix: "+JSON.stringify(t.tagName)),r.uri=n.prefix);var i=t.tags[t.tags.length-1]||t;r.ns&&i.ns!==r.ns&&Object.keys(r.ns).forEach((function(e){C(t,"onopennamespace",{prefix:e,uri:r.ns[e]})}));for(var o=0,a=t.attribList.length;o<a;o++){var s=t.attribList[o],u=s[0],c=s[1],l=w(u,!0),f=l.prefix,h=l.local,p=""===f?"":r.ns[f]||"",d={name:u,value:c,prefix:f,local:h,uri:p};f&&"xmlns"!==f&&!p&&(D(t,"Unbound namespace prefix: "+JSON.stringify(f)),d.uri=f),t.tag.attributes[u]=d,C(t,"onattribute",d)}t.attribList.length=0}t.tag.isSelfClosing=!!e,t.sawRoot=!0,t.tags.push(t.tag),C(t,"onopentag",t.tag),e||(t.noscript||"script"!==t.tagName.toLowerCase()?t.state=A.TEXT:t.state=A.SCRIPT,t.tag=null,t.tagName=""),t.attribName=t.attribValue="",t.attribList.length=0}function B(t){if(!t.tagName)return D(t,"Weird empty close tag."),t.textNode+="</>",void(t.state=A.TEXT);if(t.script){if("script"!==t.tagName)return t.script+="</"+t.tagName+">",t.tagName="",void(t.state=A.SCRIPT);C(t,"onscript",t.script),t.script=""}var e=t.tags.length,r=t.tagName;t.strict||(r=r[t.looseCase]());for(var n=r;e--&&t.tags[e].name!==n;)D(t,"Unexpected close tag");if(e<0)return D(t,"Unmatched closing tag: "+t.tagName),t.textNode+="</"+t.tagName+">",void(t.state=A.TEXT);t.tagName=r;for(var i=t.tags.length;i-- >e;){var o=t.tag=t.tags.pop();t.tagName=t.tag.name,C(t,"onclosetag",t.tagName);var a={};for(var s in o.ns)a[s]=o.ns[s];var u=t.tags[t.tags.length-1]||t;t.opt.xmlns&&o.ns!==u.ns&&Object.keys(o.ns).forEach((function(e){var r=o.ns[e];C(t,"onclosenamespace",{prefix:e,uri:r})}))}0===e&&(t.closedRoot=!0),t.tagName=t.attribValue=t.attribName="",t.attribList.length=0,t.state=A.TEXT}function F(t){var e,r=t.entity,n=r.toLowerCase(),i="";return t.ENTITIES[r]?t.ENTITIES[r]:t.ENTITIES[n]?t.ENTITIES[n]:("#"===(r=n).charAt(0)&&("x"===r.charAt(1)?(r=r.slice(2),i=(e=parseInt(r,16)).toString(16)):(r=r.slice(1),i=(e=parseInt(r,10)).toString(10))),r=r.replace(/^0+/,""),isNaN(e)||i.toLowerCase()!==r?(D(t,"Invalid character entity"),"&"+t.entity+";"):String.fromCodePoint(e))}function U(t,e){"<"===e?(t.state=A.OPEN_WAKA,t.startTagPosition=t.position):d(e)||(D(t,"Non-whitespace before first tag."),t.textNode=e,t.state=A.TEXT)}function x(t,e){var r="";return e<t.length&&(r=t.charAt(e)),r}A=t.STATE,String.fromCodePoint||(g=String.fromCharCode,R=Math.floor,y=function(){var t,e,r=16384,n=[],i=-1,o=arguments.length;if(!o)return"";for(var a="";++i<o;){var s=Number(arguments[i]);if(!isFinite(s)||s<0||s>1114111||R(s)!==s)throw RangeError("Invalid code point: "+s);s<=65535?n.push(s):(t=55296+((s-=65536)>>10),e=s%1024+56320,n.push(t,e)),(i+1===o||n.length>r)&&(a+=g.apply(null,n),n.length=0)}return a},Object.defineProperty?Object.defineProperty(String,"fromCodePoint",{value:y,configurable:!0,writable:!0}):String.fromCodePoint=y)}(e)},553:(t,e,r)=>{"use strict";var n=r(509).Buffer,i=n.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(n.isEncoding===i||!i(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=u,this.end=c,e=4;break;case"utf8":this.fillLast=s,e=4;break;case"base64":this.text=l,this.end=f,e=3;break;default:return this.write=h,void(this.end=p)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(e)}function a(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function s(t){var e=this.lastTotal-this.lastNeed,r=function(t,e,r){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==r?r:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function u(t,e){if((t.length-e)%2==0){var r=t.toString("utf16le",e);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function c(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,r)}return e}function l(t,e){var r=(t.length-e)%3;return 0===r?t.toString("base64",e):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-r))}function f(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function h(t){return t.toString(this.encoding)}function p(t){return t&&t.length?this.write(t):""}e.s=o,o.prototype.write=function(t){if(0===t.length)return"";var e,r;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<t.length?e?e+this.text(t,r):this.text(t,r):e||""},o.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},o.prototype.text=function(t,e){var r=function(t,e,r){var n=e.length-1;if(n<r)return 0;var i=a(e[n]);return i>=0?(i>0&&(t.lastNeed=i-1),i):--n<r||-2===i?0:(i=a(e[n]))>=0?(i>0&&(t.lastNeed=i-2),i):--n<r||-2===i?0:(i=a(e[n]))>=0?(i>0&&(2===i?i=0:t.lastNeed=i-3),i):0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=r;var n=t.length-(r-this.lastNeed);return t.copy(this.lastChar,0,n),t.toString("utf8",e,n)},o.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},559:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=function(t,e){this.ocf=t,this.epubPackage=e}},885:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ReadingOrderItem=void 0;var n=r(308),i=r(692),o=r(262),a=function(t,e){this.hasMathML=!1,this.spineItem=t,this.resourceItem=e,e.properties&&e.properties.includes(o.MANIFEST_PROPERTY_MATHML)&&(this.hasMathML=!0)};e.ReadingOrderItem=a;var s=function(){function t(t){this.spreadMode=null,this.nav=null,this.coverImage=null,this.a11yLevel=null,this.toc=null,this.epub=t,this.readingOrderList=[];for(var e=0,r=t.epubPackage.spine.items;e<r.length;e++)for(var s=r[e],u=s.idref,c=0,l=t.epubPackage.manifest.items;c<l.length;c++)if((d=l[c]).id==u){this.readingOrderList.push(new a(s,d));break}for(var f=t.epubPackage.spine.toc,h=0,p=t.epubPackage.manifest.items;h<p.length;h++){var d;(d=p[h]).properties&&d.properties.includes(o.MANIFEST_PROPERTY_NAV)&&(this.nav=d),d.properties&&d.properties.includes(o.MANIFEST_PROPERTY_COVER_IMAGE)&&(this.coverImage=d),f&&d.id==f&&(this.toc=d)}this.isFixedLayout=!1;for(var E=0,m=t.epubPackage.metadata.metaList;E<m.length;E++){var T=m[E];if(T.property&&"rendition:layout"==T.property&&"pre-paginated"==T.contentText&&(this.isFixedLayout=!0),T.property&&"rendition:spread"==T.property)switch(T.contentText){case"none":this.spreadMode=n.RENDITIONSPREAD.NONE;break;case"landscape":this.spreadMode=n.RENDITIONSPREAD.LANDSCAPE;break;case"portrait":this.spreadMode=n.RENDITIONSPREAD.PORTRAIT;break;case"auto":this.spreadMode=n.RENDITIONSPREAD.AUTO;default:this.spreadMode=null}}for(var _=0,g=t.epubPackage.metadata.linkList;_<g.length;_++){var R=g[_];R.rel==i.DCTERMS_CONFORMS_TO&&(R.href==o.A11Y_CONFORM_TO_IRI_A&&(this.a11yLevel="a"),R.href==o.A11Y_CONFORM_TO_IRI_AA&&(this.a11yLevel="aa"),R.href==o.A11Y_CONFORM_TO_IRI_AAA&&(this.a11yLevel="aaa"))}}return t.prototype.titles=function(){return this.epub.epubPackage.metadata.titles},t.prototype.title=function(){return this.epub.epubPackage.metadata.titles[0].contentText||""},t.prototype.languages=function(){return this.epub.epubPackage.metadata.languages},t.prototype.language=function(){return this.epub.epubPackage.metadata.languages[0].contentText||"en"},t.prototype.readingDirection=function(){return this.epub.epubPackage.spine.pageProgressionDirection},t}();e.default=s},443:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this.src=t}return t.loadFromXMLElement=function(e){var r=e.attr.src;return r?new t(r):null},t.elementName="content",t}();e.default=r},735:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this.text=t}return t.loadFromXMLElement=function(e){var r=e.childNamed("text"),n=null==r?void 0:r.val;return n?new t(n):null},t.elementName="navLabel",t}();e.default=r},141:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(471),i=function(){function t(){this.navPointList=[]}return t.loadFromXMLElement=function(e){var r=e.childrenNamed(n.default.elementName),i=new t;return r.forEach((function(t){var e=n.default.loadFromXMLElement(t);e&&i.navPointList.push(e)})),i},t.elementName="navMap",t}();e.default=i},471:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(735),i=r(443),o=function(){function t(t){this.content=null,this.navLabel=t}return t.loadFromXMLElement=function(e){var r=e.childrenNamed(n.default.elementName);if(r){var o=n.default.loadFromXMLElement(r[0]);if(!o)return null;var a=new t(o),s=e.childNamed(i.default.elementName);if(s){var u=i.default.loadFromXMLElement(s);a.content=u}return e.childrenNamed(t.elementName).forEach((function(e){var r=t.loadFromXMLElement(e);r&&(a.navPointList||(a.navPointList=[]),a.navPointList.push(r))})),a}return null},t.elementName="navPoint",t}();e.default=o},205:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(141),i=r(513),o=r(201),a=function(){function t(t){this.navMap=t}return t.loadFromXML=function(e){var r=new i.XmlDocument(e),a=r.childNamed(n.default.elementName);if(a){var s=new t(n.default.loadFromXMLElement(a)),u=r.childNamed(o.default.elementName);if(u){var c=o.default.loadFromXMLElement(u);c&&(s.pageList=c)}return s}return null},t}();e.default=a},201:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(318),i=function(){function t(){this.pageTargetList=[]}return t.loadFromXMLElement=function(e){var r=e.childrenNamed(n.default.elementName),i=new t;return r.forEach((function(t){var e=n.default.loadFromXMLElement(t);e&&i.pageTargetList.push(e)})),i},t.elementName="pageList",t}();e.default=i},318:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(735),i=r(443),o=function(){function t(t){this.navLabel=t}return t.loadFromXMLElement=function(e){var r=e.childNamed(n.default.elementName);if(!r)return null;var o=n.default.loadFromXMLElement(r);if(!o)return null;var a=new t(o),s=e.childNamed(i.default.elementName);if(s){var u=i.default.loadFromXMLElement(s);u&&(a.content=u)}return a},t.elementName="pageTarget",t}();e.default=o},15:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(376),i=r(513),o=function(){function t(t){var e=this;this.elementName="container",this.version="1.0",this.xmlns="urn:oasis:names:tc:opendocument:xmlns:container",this.rootfiles=[],t.forEach((function(t){var r=new n.default(t);e.rootfiles.push(r)}))}return t.loadFromXML=function(e){var r=null,n=new i.XmlDocument(e).childNamed("rootfiles");if(null==n)return r;var o=null==n?void 0:n.childrenNamed("rootfile");if(0==o.length)return r;for(var a=[],s=0,u=o;s<u.length;s++){var c=u[s];(null==c?void 0:c.attr["full-path"])&&a.push(null==c?void 0:c.attr["full-path"])}return a&&(r=new t(a)),r},t.prototype.toXmlString=function(){var t='<?xml version="1.0" encoding="utf-8" standalone="no"?>\n<container xmlns="urn:oasis:names:tc:opendocument:xmlns:container" version="1.0">\n\t<rootfiles>\n  ';return this.rootfiles.forEach((function(e){t+="\t\t",t+=e.toXmlString(),t+="\n"})),t+="\t</rootfiles>\n</container>"},t}();e.default=o},802:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this.container=t}return t.dictory="META-INF",t.containerPath="META-INF/container.xml",t.mimetype="application/epub+zip",t}();e.default=r},376:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this.fullPath=t,this.mediaType="application/oebps-package+xml"}return t.prototype.toXmlString=function(){return"<".concat(t.elementName,' full-path="').concat(this.fullPath,'" media-type="').concat(this.mediaType,'"/>')},t.elementName="rootfile",t}();e.default=r},985:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CoreMediaTypes=void 0;var n=r(299);e.CoreMediaTypes=["image/gif","image/jpeg","image/png","image/svg+xml","audio/mpeg","audio/mp4","text/css","font/ttf","application/font-sfnt","font/otf","application/vnd.ms-opentype","font/woff","application/font-woff","font/woff2","application/xhtml+xml","application/javascript","text/javascript","application/x-dtbncx+xml","application/smil+xml","application/pls+xml"];var i=function(){function t(t,e){this.items=t,e&&(this.id=e)}return t.loadFromXMLElement=function(e){try{for(var r=e.childrenNamed(n.default.elementName),i=[],o=0,a=r;o<a.length;o++){var s=a[o],u=n.default.loadFromXMLElement(s);null!=u&&i.push(u)}return new t(i)}catch(t){console.error(t)}return null},t.prototype.toXmlString=function(){var e="<".concat(t.elementName,">\n");return this.items.forEach((function(t){e+="\t",e+=t.toXmlString(),e+="\n"})),e+="</".concat(t.elementName,">")},t.elementName="manifest",t}();e.default=i},299:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e,r){this.id=t,this.href=e,this.mediaType=r}return t.loadFromXMLElement=function(e){var r=e.attr.id,n=e.attr.href,i=e.attr["media-type"],o=null;r&&n&&i&&(o=new t(r,n,i));var a=e.attr.properties;return a&&o&&(o.properties=null==a?void 0:a.split(" ")),e.attr["media-overlay"]&&o&&(o.mediaOverlay=e.attr["media-overlay"]),o},t.prototype.toXmlString=function(){return"<".concat(t.elementName,' id="').concat(this.id,'" media-type="').concat(this.mediaType,'" href="').concat(this.href,'"/>')},t.elementName="item",t}();e.default=r},79:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(177),i=r(985),o=r(66),a=r(513),s=function(){function t(t,e,r,n,i){this.metadata=t,this.manifest=e,this.spine=r,this.uniqueIdentifier=n,this.version=i}return t.loadFromXML=function(e){var r=null;try{var s=new a.XmlDocument(e),u=s.childNamed(n.default.elementName);if(null==u)throw new Error("missing ".concat(n.default.elementName," from opf file"));var c=n.default.loadFromXMLElement(u),l=s.childNamed("manifest");if(null==l)throw new Error("missing ".concat(i.default.elementName," from opf file"));var f=i.default.loadFromXMLElement(l),h=s.childNamed("spine");if(null==h)throw new Error("missing ".concat(o.default.elementName," from opf file"));var p=o.default.loadFromXMLElement(h),d=s.attr["unique-identifier"],E=s.attr.version;c&&f&&p&&(r=new t(c,f,p,d,E))}catch(t){throw t}return r},t.prototype.toXmlString=function(){var e='<?xml version="1.0" encoding="utf-8" standalone="no"?>\n<'.concat(t.elementName,' xmlns="http://www.idpf.org/2007/opf" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" version="').concat(this.version,'" xml:lang="en" unique-identifier="').concat(this.uniqueIdentifier,'">\n');return e+=this.metadata.toXmlString(),e+="\n",e+=this.manifest.toXmlString(),e+="\n",e+=this.spine.toXmlString(),(e+="\n")+"</".concat(t.elementName,">")},t.elementName="package",t.PREFIX_DCTERMS="http://purl.org/dc/terms/",t.PREFIX_OPF="http://www.idpf.org/2007/opf",t.PREFIX_RENDITION="http://www.idpf.org/vocab/rendition/#",t}();e.default=s},66:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Itemref=void 0;var n=r(308),i=function(){function t(t){this.idref=t}return t.loadFromXMLElement=function(e){var r=e.attr.idref,n=null;return r&&(n=new t(r)),n},t.prototype.toXmlString=function(){return"<".concat(t.elementName,' idref="').concat(this.idref,'"/>')},t.elementName="itemref",t}();e.Itemref=i;var o=function(){function t(t){this.items=t,this.pageProgressionDirection=n.DIR.LTR}return t.loadFromXMLElement=function(e){var r=null;try{for(var o=e.childrenNamed(i.elementName),a=[],s=0,u=o;s<u.length;s++){var c=u[s],l=i.loadFromXMLElement(c);null!=l&&a.push(l)}r=new t(a);var f=e.attr["page-progression-direction"];r.pageProgressionDirection=f&&"rtl"==f?n.DIR.RTL:n.DIR.LTR;var h=e.attr.toc;return h&&(r.toc=h),r}catch(t){console.error(t)}return r},t.prototype.toXmlString=function(){var e="<".concat(t.elementName,">\n");return this.items.forEach((function(t){e+="\t",e+=t.toXmlString(),e+="\n"})),e+="</".concat(t.elementName,">")},t.elementName="spine",t}();e.default=o},308:(t,e)=>{"use strict";var r,n;Object.defineProperty(e,"__esModule",{value:!0}),e.RENDITIONSPREAD=e.DIR=void 0,(n=e.DIR||(e.DIR={})).LTR="ltr",n.RTL="rtl",(r=e.RENDITIONSPREAD||(e.RENDITIONSPREAD={})).NONE="none",r.LANDSCAPE="langscape",r.PORTRAIT="portrait",r.BOTH="both",r.AUTO="auto"},692:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DCTERMS_SUBJECT=e.DCTERMS_SPATIAL=e.DCTERMS_SOURCE=e.DCTERMS_RIGHTS_HOLDER=e.DCTERMS_RIGHTS=e.DCTERMS_REQUIRES=e.DCTERMS_REPLACES=e.DCTERMS_RELATION=e.DCTERMS_REFERENCES=e.DCTERMS_PUBLISHER=e.DCTERMS_PROVENANCE=e.DCTERMS_MODIFIED=e.DCTERMS_MEDIUM=e.DCTERMS_MEDIATOR=e.DCTERMS_LICENSE=e.DCTERMS_LANGUAGE=e.DCTERMS_IS_VERSION_OF=e.DCTERMS_ISSUED=e.DCTERMS_IS_REQUIRED_BY=e.DCTERMS_IS_REPLACED_BY=e.DCTERMS_IS_REFERENCED_BY=e.DCTERMS_IS_PART_OF=e.DCTERMS_IS_FORMAT_OF=e.DCTERMS_INSTRUCTIONAL_METHOD=e.DCTERMS_IDENTIFIER=e.DCTERMS_HAS_VERSION=e.DCTERMS_HAS_PART=e.DCTERMS_HAS_FORMAT=e.DCTERMS_FORMAT=e.DCTERMS_EXTENT=e.DCTERMS_EDUCATION_LEVEL=e.DCTERMS_DESCRIPTION=e.DCTERMS_DATE_SUBMITTED=e.DCTERMS_DATE_COPYRIGHTED=e.DCTERMS_DATE_ACCEPTED=e.DCTERMS_DATE=e.DCTERMS_CREATOR=e.DCTERMS_CREATED=e.DCTERMS_COVERAGE=e.DCTERMS_CONTRIBUTOR=e.DCTERMS_CONFORMS_TO=e.DCTERMS_BIBLIOGRAPHIC_CITATION=e.DCTERMS_AVAILABLE=e.DCTERMS_AUDIENCE=e.DCTERMS_ALTERNATIVE=e.DCTERMS_ACCRUAL_POLICY=e.DCTERMS_ACCRUAL_PERIODICITY=e.DCTERMS_ACCRUAL_METHOD=e.DCTERMS_ACCESS_RIGHTS=e.DCTERMS_ABSTRACT=void 0,e.DC_TYPE=e.DC_TITLE=e.DC_SUBJECT=e.DC_SOURCE=e.DC_RIGHTS=e.DC_RELATION=e.DC_PUBLISHER=e.DC_LANGUAGE=e.DC_IDENTIFIER=e.DC_FORMAT=e.DC_DESCRIPTION=e.DC_DATE=e.DC_CREATOR=e.DC_COVERAGE=e.DC_CONTRIBUTOR=e.DCTERMS_VALID=e.DCTERMS_TYPE=e.DCTERMS_TITLE=e.DCTERMS_TEMPORAL=e.DCTERMS_TABLE_OF_CONTENTS=void 0,e.DCTERMS_ABSTRACT="dcterms:abstract",e.DCTERMS_ACCESS_RIGHTS="dcterms:accessRights",e.DCTERMS_ACCRUAL_METHOD="dcterms:accrualMethod",e.DCTERMS_ACCRUAL_PERIODICITY="dcterms:accrualPeriodicity",e.DCTERMS_ACCRUAL_POLICY="dcterms:accrualPolicy",e.DCTERMS_ALTERNATIVE="dcterms:alternative",e.DCTERMS_AUDIENCE="dcterms:audience",e.DCTERMS_AVAILABLE="dcterms:available",e.DCTERMS_BIBLIOGRAPHIC_CITATION="dcterms:bibliographicCitation",e.DCTERMS_CONFORMS_TO="dcterms:conformsTo",e.DCTERMS_CONTRIBUTOR="dcterms:contributor",e.DCTERMS_COVERAGE="dcterms:coverage",e.DCTERMS_CREATED="dcterms:created",e.DCTERMS_CREATOR="dcterms:creator",e.DCTERMS_DATE="dcterms:date",e.DCTERMS_DATE_ACCEPTED="dcterms:dateAccepted",e.DCTERMS_DATE_COPYRIGHTED="dcterms:dateCopyrighted",e.DCTERMS_DATE_SUBMITTED="dcterms:dateSubmitted",e.DCTERMS_DESCRIPTION="dcterms:description",e.DCTERMS_EDUCATION_LEVEL="dcterms:educationLevel",e.DCTERMS_EXTENT="dcterms:extent",e.DCTERMS_FORMAT="dcterms:format",e.DCTERMS_HAS_FORMAT="dcterms:hasFormat",e.DCTERMS_HAS_PART="dcterms:hasPart",e.DCTERMS_HAS_VERSION="dcterms:hasVersion",e.DCTERMS_IDENTIFIER="dcterms:identifier",e.DCTERMS_INSTRUCTIONAL_METHOD="dcterms:instructionalMethod",e.DCTERMS_IS_FORMAT_OF="dcterms:isFormatOf",e.DCTERMS_IS_PART_OF="dcterms:isPartOf",e.DCTERMS_IS_REFERENCED_BY="dcterms:isReferencedBy",e.DCTERMS_IS_REPLACED_BY="dcterms:isReplacedBy",e.DCTERMS_IS_REQUIRED_BY="dcterms:isRequiredBy",e.DCTERMS_ISSUED="dcterms:issued",e.DCTERMS_IS_VERSION_OF="dcterms:isVersionOf",e.DCTERMS_LANGUAGE="dcterms:language",e.DCTERMS_LICENSE="dcterms:license",e.DCTERMS_MEDIATOR="dcterms:mediator",e.DCTERMS_MEDIUM="dcterms:medium",e.DCTERMS_MODIFIED="dcterms:modified",e.DCTERMS_PROVENANCE="dcterms:provenance",e.DCTERMS_PUBLISHER="dcterms:publisher",e.DCTERMS_REFERENCES="dcterms:references",e.DCTERMS_RELATION="dcterms:relation",e.DCTERMS_REPLACES="dcterms:replaces",e.DCTERMS_REQUIRES="dcterms:requires",e.DCTERMS_RIGHTS="dcterms:rights",e.DCTERMS_RIGHTS_HOLDER="dcterms:rightsHolder",e.DCTERMS_SOURCE="dcterms:source",e.DCTERMS_SPATIAL="dcterms:spatial",e.DCTERMS_SUBJECT="dcterms:subject",e.DCTERMS_TABLE_OF_CONTENTS="dcterms:tableOfContents",e.DCTERMS_TEMPORAL="dcterms:temporal",e.DCTERMS_TITLE="dcterms:title",e.DCTERMS_TYPE="dcterms:type",e.DCTERMS_VALID="dcterms:valid",e.DC_CONTRIBUTOR="dc:contributor",e.DC_COVERAGE="dc:coverage",e.DC_CREATOR="dc:creator",e.DC_DATE="dc:date",e.DC_DESCRIPTION="dc:description",e.DC_FORMAT="dc:format",e.DC_IDENTIFIER="dc:identifier",e.DC_LANGUAGE="dc:language",e.DC_PUBLISHER="dc:publisher",e.DC_RELATION="dc:relation",e.DC_RIGHTS="dc:rights",e.DC_SOURCE="dc:source",e.DC_SUBJECT="dc:subject",e.DC_TITLE="dc:title",e.DC_TYPE="dc:type"},262:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.A11Y_CONFORM_TO_IRI_AAA=e.A11Y_CONFORM_TO_IRI_AA=e.A11Y_CONFORM_TO_IRI_A=e.SPINE_PROPERTY_PAGE_SPREAD_RIGHT=e.SPINE_PROPERTY_PAGE_SPREAD_LEFT=e.MANIFEST_VG=e.MANIFEST_PROPERTY_SCRIPTED=e.MANIFEST_PROPERTY_REOMTE_RESOURCES=e.MANIFEST_PROPERTY_NAV=e.MANIFEST_PROPERTY_MATHML=e.MANIFEST_PROPERTY_COVER_IMAGE=e.META_LINK_PROPERTY_XMP=e.META_LINK_PROPERTY_ONIX=e.META_LINK_REL_XMP_RECORD=e.META_LINK_REL_XML_SIGNATURE=e.META_LINK_REL_VOICING=e.META_LINK_REL_RECORD=e.META_LINK_REL_ONIX_RECORD=e.META_LINK_REL_MODS_RECORD=e.META_LINK_REL_MARC21XML_RECORD=e.META_LINK_REL_ALTERNATE=e.META_LINK_REL_ACQUIRE=e.META_PROPERTY_TITLE_TYPE=e.META_PROPERTY_TERM=e.META_PROPERTY_SOURCE_OF=e.META_PROPERTY_ROLE=e.META_PROPERTY_META_AUTH=e.META_PROPERTY_IDENTIFIER_TYPE=e.META_PROPERTY_GROUP_POSITION=e.META_PROPERTY_DISPLAY_SEQ=e.META_PROPERTY_COLLECTION_TYPE=e.META_PROPERTY_BELONGS_TO_COLLECTION=e.META_PROPERTY_AUTHORITY=e.META_PROPERTY_ALTERNATE_SCRIPT=void 0,e.META_PROPERTY_ALTERNATE_SCRIPT="alternate-script",e.META_PROPERTY_AUTHORITY="authority",e.META_PROPERTY_BELONGS_TO_COLLECTION="belongs-to-collection",e.META_PROPERTY_COLLECTION_TYPE="collection-type",e.META_PROPERTY_DISPLAY_SEQ="display-seq",e.META_PROPERTY_GROUP_POSITION="group-position",e.META_PROPERTY_IDENTIFIER_TYPE="identifier-type",e.META_PROPERTY_META_AUTH="meta-auth",e.META_PROPERTY_ROLE="role",e.META_PROPERTY_SOURCE_OF="source-of",e.META_PROPERTY_TERM="term",e.META_PROPERTY_TITLE_TYPE="title-type",e.META_LINK_REL_ACQUIRE="aquire",e.META_LINK_REL_ALTERNATE="alternate",e.META_LINK_REL_MARC21XML_RECORD="marc21xml-record",e.META_LINK_REL_MODS_RECORD="mods-record",e.META_LINK_REL_ONIX_RECORD="onix-record",e.META_LINK_REL_RECORD="record",e.META_LINK_REL_VOICING="voicing",e.META_LINK_REL_XML_SIGNATURE="xml-signature",e.META_LINK_REL_XMP_RECORD="xmp-record",e.META_LINK_PROPERTY_ONIX="onix",e.META_LINK_PROPERTY_XMP="xmp",e.MANIFEST_PROPERTY_COVER_IMAGE="cover-image",e.MANIFEST_PROPERTY_MATHML="mathml",e.MANIFEST_PROPERTY_NAV="nav",e.MANIFEST_PROPERTY_REOMTE_RESOURCES="remote-resources",e.MANIFEST_PROPERTY_SCRIPTED="scripted",e.MANIFEST_VG="svg",e.SPINE_PROPERTY_PAGE_SPREAD_LEFT="page-spread-left",e.SPINE_PROPERTY_PAGE_SPREAD_RIGHT="page-spread-right",e.A11Y_CONFORM_TO_IRI_A="http://www.idpf.org/epub/a11y/accessibility-20170105.html#wcag-a",e.A11Y_CONFORM_TO_IRI_AA="http://www.idpf.org/epub/a11y/accessibility-20170105.html#wcag-aa",e.A11Y_CONFORM_TO_IRI_AAA="http://www.idpf.org/epub/a11y/accessibility-20170105.html#wcag-aaa"},180:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=function(t){this.nameSpace="http://purl.org/dc/elements/1.1/",this.contentText=t}},911:function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=r(180),a=r(692),s=function(t){function e(e,r){var n=t.call(this,e)||this;return n.id=r,n}return i(e,t),e.loadFromXMLElement=function(t){var r,n=null===(r=t.firstChild)||void 0===r?void 0:r.toString();return null==n?null:new e(n,t.attr.id)},e.prototype.toXmlString=function(){var t="<".concat(e.elementName);return this.id&&(t+=' id="'.concat(this.id,'"')),t+">".concat(this.contentText,"</").concat(e.elementName,">")},e.elementName=a.DC_IDENTIFIER,e}(o.default);e.default=s},68:function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=r(180),a=r(692),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.loadFromXMLElement=function(t){var r,n=null===(r=t.firstChild)||void 0===r?void 0:r.toString();return null==n?null:new e(n)},e.prototype.toXmlString=function(){var t="<".concat(e.elementName);return this.id&&(t+=' id="'.concat(this.id)),t+">".concat(this.contentText,"</").concat(e.elementName,">")},e.elementName=a.DC_LANGUAGE,e}(o.default);e.default=s},169:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){this.href=t,this.rel=e}return t.loadFromXMLElement=function(e){var r=e.attr.href,n=e.attr.rel;return r&&n?new t(r,n):null},t.elementName="link",t}();e.default=r},753:function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(e,r){var n=t.call(this,r)||this;return n.property=e,n}return i(e,t),e.loadFromXMLElement=function(t){var r,n=null,i=null===(r=t.firstChild)||void 0===r?void 0:r.toString();return n=new e(t.attr.property,i),t.attr.refines&&(n.refines=t.attr.refines),t.attr.name&&(n.name=t.attr.name),t.attr.content&&(n.content=t.attr.content),n},e.prototype.toXmlString=function(){return"<".concat(e.elementName,' property="').concat(this.property,'"')+">".concat(this.contentText,"</").concat(e.elementName,">")},e.elementName="meta",e}(r(180).default);e.default=o},177:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(911),i=r(246),o=r(68),a=r(753),s=r(169),u=function(){function t(t,e,r,n){this.identifiers=t,this.titles=e,this.languages=r,this.metaList=n,this.linkList=[]}return t.loadFromXMLElement=function(e){var r=null;try{for(var u=e.childrenNamed(i.default.elementName),c=[],l=0,f=u;l<f.length;l++){var h=f[l],p=i.default.loadFromXMLElement(h);if(null==p)throw Error("Found invalid ".concat(i.default.elementName," from ").concat(t.elementName));c.push(p)}for(var d=e.childrenNamed(n.default.elementName),E=[],m=0,T=d;m<T.length;m++){h=T[m];var _=n.default.loadFromXMLElement(h);if(null==_)throw Error("Found invalid ".concat(n.default.elementName," from ").concat(t.elementName));E.push(_)}for(var g=e.childrenNamed(o.default.elementName),R=[],y=0,A=g;y<A.length;y++){h=A[y];var I=o.default.loadFromXMLElement(h);if(null==I)throw Error("Found invalid ".concat(o.default.elementName," from ").concat(t.elementName));R.push(I)}for(var N=[],C=e.childrenNamed(a.default.elementName),O=0,v=C;O<v.length;O++){h=v[O];var S=a.default.loadFromXMLElement(h);if(null==S)throw Error("Found invalid ".concat(a.default.elementName," from ").concat(t.elementName));N.push(S)}r=new t(E,c,R,N);for(var b=e.childrenNamed(s.default.elementName),D=0,M=b;D<M.length;D++){h=M[D];var w=s.default.loadFromXMLElement(h);w&&r.linkList.push(w)}}catch(t){console.error(t)}finally{return r}},t.prototype.toXmlString=function(){var e="<".concat(t.elementName,">\n");return this.identifiers.forEach((function(t){e+="\t",e+=t.toXmlString(),e+="\n"})),this.titles.forEach((function(t){e+="\t",e+=t.toXmlString(),e+="\n"})),this.languages.forEach((function(t){e+="\t",e+=t.toXmlString(),e+="\n"})),this.metaList.forEach((function(t){e+="\t",e+=t.toXmlString(),e+="\n"})),e+="</".concat(t.elementName,">")},t.elementName="metadata",t}();e.default=u},246:function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=r(180),a=r(692),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.loadFromXMLElement=function(t){var r,n=null===(r=t.firstChild)||void 0===r?void 0:r.toString();return null==n?null:new e(n)},e.prototype.toXmlString=function(){var t="<".concat(e.elementName);return this.id&&(t+=' id="'.concat(this.id,'"')),t+">".concat(this.contentText,"</").concat(e.elementName,">")},e.elementName=a.DC_TITLE,e}(o.default);e.default=s},513:(t,e,r)=>{t.exports=r(11)},11:(t,e,r)=>{!function(){var e;if(t.exports&&!r.g.xmldocAssumeBrowser)e=r(99);else if(!(e=this.sax))throw new Error("Expected sax to be defined. Make sure you're including sax.js before this file.");function n(t){var e=u[u.length-1].parser;this.name=t.name,this.attr=t.attributes,this.val="",this.children=[],this.firstChild=null,this.lastChild=null,this.line=e.line,this.column=e.column,this.position=e.position,this.startTagPosition=e.startTagPosition}function i(t){this.text=t}function o(t){this.cdata=t}function a(t){this.comment=t}function s(t){if(t&&(t=t.toString().trim()),!t)throw new Error("No XML to parse!");var r;this.doctype="",this.parser=e.parser(!0),(r=this.parser).onopentag=c,r.onclosetag=l,r.ontext=f,r.oncdata=h,r.oncomment=p,r.ondoctype=d,r.onerror=E,u=[this],this.parser.write(t),delete this.parser}n.prototype._addChild=function(t){this.children.push(t),this.firstChild||(this.firstChild=t),this.lastChild=t},n.prototype._opentag=function(t){var e=new n(t);this._addChild(e),u.unshift(e)},n.prototype._closetag=function(){u.shift()},n.prototype._text=function(t){void 0!==this.children&&(this.val+=t,this._addChild(new i(t)))},n.prototype._cdata=function(t){this.val+=t,this._addChild(new o(t))},n.prototype._comment=function(t){void 0!==this.children&&this._addChild(new a(t))},n.prototype._error=function(t){throw t},n.prototype.eachChild=function(t,e){for(var r=0,n=this.children.length;r<n;r++)if("element"===this.children[r].type&&!1===t.call(e,this.children[r],r,this.children))return},n.prototype.childNamed=function(t){for(var e=0,r=this.children.length;e<r;e++){var n=this.children[e];if(n.name===t)return n}},n.prototype.childrenNamed=function(t){for(var e=[],r=0,n=this.children.length;r<n;r++)this.children[r].name===t&&e.push(this.children[r]);return e},n.prototype.childWithAttribute=function(t,e){for(var r=0,n=this.children.length;r<n;r++){var i=this.children[r];if("element"===i.type&&(e&&i.attr[t]===e||!e&&i.attr[t]))return i}},n.prototype.descendantWithPath=function(t){for(var e=this,r=t.split("."),n=0,i=r.length;n<i;n++){if(!e||"element"!==e.type)return;e=e.childNamed(r[n])}return e},n.prototype.valueWithPath=function(t){var e=t.split("@"),r=this.descendantWithPath(e[0]);return r?e.length>1?r.attr[e[1]]:r.val:void 0},n.prototype.toString=function(t){return this.toStringWithIndent("",t)},n.prototype.toStringWithIndent=function(t,e){var r=t+"<"+this.name,n=e&&e.compressed?"":"\n";for(var i in e&&e.preserveWhitespace,this.attr)Object.prototype.hasOwnProperty.call(this.attr,i)&&(r+=" "+i+'="'+m(this.attr[i])+'"');if(1===this.children.length&&"element"!==this.children[0].type)r+=">"+this.children[0].toString(e)+"</"+this.name+">";else if(this.children.length){r+=">"+n;for(var o=t+(e&&e.compressed?"":"  "),a=0,s=this.children.length;a<s;a++)r+=this.children[a].toStringWithIndent(o,e)+n;r+=t+"</"+this.name+">"}else e&&e.html?-1!==["area","base","br","col","embed","frame","hr","img","input","keygen","link","menuitem","meta","param","source","track","wbr"].indexOf(this.name)?r+="/>":r+="></"+this.name+">":r+="/>";return r},i.prototype.toString=function(t){return T(m(this.text),t)},i.prototype.toStringWithIndent=function(t,e){return t+this.toString(e)},o.prototype.toString=function(t){return"<![CDATA["+T(this.cdata,t)+"]]>"},o.prototype.toStringWithIndent=function(t,e){return t+this.toString(e)},a.prototype.toString=function(t){return"\x3c!--"+T(m(this.comment),t)+"--\x3e"},a.prototype.toStringWithIndent=function(t,e){return t+this.toString(e)},n.prototype.type="element",i.prototype.type="text",o.prototype.type="cdata",a.prototype.type="comment",function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])}(s.prototype,n.prototype),s.prototype._opentag=function(t){void 0===this.children?n.call(this,t):n.prototype._opentag.apply(this,arguments)},s.prototype._doctype=function(t){this.doctype+=t};var u=null;function c(){u[0]&&u[0]._opentag.apply(u[0],arguments)}function l(){u[0]&&u[0]._closetag.apply(u[0],arguments)}function f(){u[0]&&u[0]._text.apply(u[0],arguments)}function h(){u[0]&&u[0]._cdata.apply(u[0],arguments)}function p(){u[0]&&u[0]._comment.apply(u[0],arguments)}function d(){u[0]&&u[0]._doctype.apply(u[0],arguments)}function E(){u[0]&&u[0]._error.apply(u[0],arguments)}function m(t){return t.toString().replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/'/g,"&apos;").replace(/"/g,"&quot;")}function T(t,e){var r=t;return e&&e.trimmed&&t.length>25&&(r=r.substring(0,25).trim()+"…"),e&&e.preserveWhitespace||(r=r.trim()),r}t.exports&&!r.g.xmldocAssumeBrowser?t.exports.XmlDocument=s:this.XmlDocument=s}()}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,r),o.exports}r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}();var n={};return(()=>{"use strict";var t=n;Object.defineProperty(t,"__esModule",{value:!0}),t.PageTarget=t.PageList=t.NavPoint=t.NavMap=t.NavLabel=t.Ncx=t.DIR=t.Itemref=t.Spine=t.BasicElement=t.Meta=t.Language=t.Title=t.Identifier=t.Metadata=t.ManifestItem=t.Manifest=t.Package=t.Rootfile=t.Container=t.Ocf=t.ReadingOrderItem=t.Epub=t.EpubHelper=void 0;var e=r(559);t.Epub=e.default;var i=r(802);t.Ocf=i.default;var o=r(15);t.Container=o.default;var a=r(376);t.Rootfile=a.default;var s=r(79);t.Package=s.default;var u=r(985);t.Manifest=u.default;var c=r(299);t.ManifestItem=c.default;var l=r(177);t.Metadata=l.default;var f=r(911);t.Identifier=f.default;var h=r(246);t.Title=h.default;var p=r(68);t.Language=p.default;var d=r(753);t.Meta=d.default;var E=r(180);t.BasicElement=E.default;var m=r(66);t.Spine=m.default,Object.defineProperty(t,"Itemref",{enumerable:!0,get:function(){return m.Itemref}});var T=r(308);Object.defineProperty(t,"DIR",{enumerable:!0,get:function(){return T.DIR}});var _=r(205);t.Ncx=_.default;var g=r(735);t.NavLabel=g.default;var R=r(141);t.NavMap=R.default;var y=r(471);t.NavPoint=y.default;var A=r(201);t.PageList=A.default;var I=r(318);t.PageTarget=I.default;var N=r(885);t.EpubHelper=N.default,Object.defineProperty(t,"ReadingOrderItem",{enumerable:!0,get:function(){return N.ReadingOrderItem}})})(),n})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,